datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

model Command {
  id          String   @id @default(cuid())
  content     String   @db.VarChar(255)
  description String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  private     Boolean  @default(false)
  labels      Label[]
  recipe      Recipe?  @relation(fields: [recipeId], references: [id])
  recipeId    String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  team        Team?    @relation(fields: [teamId], references: [id])
  teamId      String?

  @@fulltext([content])
  @@fulltext([description])
  @@fulltext([content, description])
}

model Snippet {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(255)
  content     String   @db.Text()
  description String   @db.VarChar(500)
  language    String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  private     Boolean  @default(false)
  labels      Label[]
  recipe      Recipe?  @relation(fields: [recipeId], references: [id])
  recipeId    String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  team        Team?    @relation(fields: [teamId], references: [id])
  teamId      String?

  @@fulltext([title])
  @@fulltext([content])
  @@fulltext([description])
  @@fulltext([title, content, description])
}

model Label {
  id        String   @id @default(cuid())
  content   String   @db.VarChar(255)
  Command   Command? @relation(fields: [commandId], references: [id])
  Snippet   Snippet? @relation(fields: [snippetId], references: [id])
  snippetId String?
  commandId String?

  @@index([commandId])
  @@fulltext([content])
}

model Recipe {
  id        String    @id @default(cuid())
  title     String    @db.VarChar(255)
  private   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  commands  Command[]
  snippets  Snippet[]
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  team      Team?     @relation(fields: [teamId], references: [id])
  teamId    String?
}

model Link {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(255)
  type        String   @db.VarChar(255)
  content     String   @db.VarChar(255)
  description String   @db.VarChar(255)
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  notes       String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  visibility  String   @db.VarChar(255)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  commands      Command[]
  snippets      Snippet[]
  links         Link[]
  recipes       Recipe[]
  teams         Team[]
}

model Team {
  id        String    @id @default(cuid())
  name      String
  members   User[]
  commands  Command[]
  recipes   Recipe[]
  snippets  Snippet[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
