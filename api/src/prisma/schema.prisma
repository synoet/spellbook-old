datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

generator zod {
  provider    = "zod-prisma"
  output      = "./zod"
  modelSuffix = "Schema"
}

model Command {
  id          String   @id @default(cuid())
  content     String   @db.VarChar(255)
  description String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  private     Boolean  @default(false)
  labels      Label[]
  recipe      Recipe?  @relation(fields: [recipeId], references: [id])
  recipeId    String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  team        Team?    @relation(fields: [teamId], references: [id])
  teamId      String?

  @@fulltext([content])
  @@fulltext([description])
  @@fulltext([content, description])
}


model Snippet {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(255)
  content     String   @db.Text()
  description String   @db.VarChar(500)
  language    String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  private     Boolean  @default(false)
  labels      Label[]
  recipe      Recipe?  @relation(fields: [recipeId], references: [id])
  recipeId    String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  team        Team?    @relation(fields: [teamId], references: [id])
  teamId      String?

  @@fulltext([title])
  @@fulltext([content])
  @@fulltext([description])
  @@fulltext([title, content, description])
}

model Label {
  id        String   @id @default(cuid())
  content   String   @db.VarChar(255)
  Command   Command? @relation(fields: [commandId], references: [id])
  Snippet   Snippet? @relation(fields: [snippetId], references: [id])
  snippetId String?
  commandId String?

  @@index([commandId])
  @@fulltext([content])
}

model Recipe {
  id        String    @id @default(cuid())
  title     String    @db.VarChar(255)
  private   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  commands  Command[]
  snippets  Snippet[]
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  team      Team?     @relation(fields: [teamId], references: [id])
  teamId    String?
}

model Link {
  id         String   @id @default(cuid())
  linkId     String   @unique @db.VarChar(255)
  title      String   @db.VarChar(255)
  type       String   @db.VarChar(255)
  content    String   @db.Text()
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  createdAt  DateTime @default(now())
  visibility String   @db.VarChar(255)
}

model User {
  id           String       @id @default(cuid())
  username     String       @unique
  profileImage String
  githubId     String?      @unique
  commands     Command[]
  snippets     Snippet[]
  recipes      Recipe[]
  links        Link[]
  memberOf     TeamMember[]
}

model TeamMember {
  id      String  @id @default(cuid())
  team    Team    @relation(fields: [teamId], references: [id])
  teamId  String
  user    User    @relation(fields: [userId], references: [id])
  userId  String
  creator Boolean @default(false)
  admin   Boolean @default(false)
}

model Team {
  id        String       @id @default(cuid())
  name      String
  members   TeamMember[]
  commands  Command[]
  recipes   Recipe[]
  snippets  Snippet[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}
